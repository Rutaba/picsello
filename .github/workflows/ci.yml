name: ci

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  MSG_MINIMAL: ref,commit
  SLACK_USERNAME: Picsello CI
  SLACK_ICON_EMOJI: ':camera:'
  SLACK_MESSAGE: ${{github.event.workflow_run.html_url}}
  SHELL: /usr/bin/bash


jobs:
  build:

    name: Build and test
    runs-on: ubuntu-latest

    services:
      db:
        image: postgres:11
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2
    - name: Set up Elixir
      uses: erlef/setup-elixir@885971a72ed1f9240973bd92ab57af8c1aa68f24
      with:
        elixir-version: '1.12.1' # Define the elixir version [required]
        otp-version: '22.3' # Define the OTP version [required]
    - name: Restore dependencies cache
      uses: actions/cache@v2
      id: cache-mix
      with:
        path: |
          deps
          _build
        key: ${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-
    - name: Install dependencies
      if: steps.cache-mix.outputs.cache-hit != 'true'
      run: mix deps.get
    - name: Run Credo
      run: MIX_ENV=test mix credo
    - name: Run Dialyzer
      run: mix dialyzer
    - uses: actions/setup-node@v2
      with:
        node-version: '14.18.1' # WARNING: *must* match ../.node-version
        cache: 'npm'
        cache-dependency-path: assets/package-lock.json
    - name: Build js
      run: npm install --prefix assets && npm run deploy --prefix assets && mix phx.digest
    - name: Dump Google app credentials
      run: printf "$JSON" > /tmp/.google_app_credentials.json
      env:
        JSON: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS_JSON }}
    - name: Check credentials
      run: wc /tmp/.google_app_credentials.json
    - name: Run tests
      run: mix test --trace --cover
      env:
        GOOGLE_APPLICATION_CREDENTIALS: '/tmp/.google_app_credentials.json'

    - name: Archive screenshots
      if: ${{failure()}}
      uses: actions/upload-artifact@v2
      with:
        name: screenshots
        path: |
          screenshots/*.png
    - name: Notify slack of success
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: ':rocket: build passed :rocket:'
    - name: Notify slack of failure
      if: ${{failure()}}
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_COLOR: ${{ job.status }}
        SLACK_TITLE: ':skull: build failed :skull:'
    - name: deploy to staging
      run: curl ${{ secrets.RENDER_TRIGGER_DEPLOY }}
